#!/usr/bin/env quest

use "std/test"
use "std/sys"

# Parse command line arguments
let use_colors = true
let use_condensed = true  # Enable condensed output by default
let test_paths = []
let filter_tags = []  # Only run tests with these tags
let skip_tags = []    # Skip tests with these tags

# Build test paths array from arguments
let i = 1
while i < sys.argv.len()
    let arg = sys.argv[i]
    if arg == "--no-color"
        use_colors = false
    elif arg == "--verbose" or arg == "-v"
        use_condensed = false
    elif arg == "--condensed" or arg == "-c"
        use_condensed = true
    elif arg.startswith("--tag=")
        # Extract tag name after =
        let tag = arg.slice(6, arg.len())
        filter_tags = filter_tags.concat([tag])
    elif arg.startswith("--skip-tag=")
        # Extract tag name after =
        let tag = arg.slice(11, arg.len())
        skip_tags = skip_tags.concat([tag])
    elif arg.startswith("--") or arg.startswith("-") and arg != "-v" and arg != "-c"
        # Unknown flag
        puts("Error: Unknown flag '" .. arg .. "'")
        puts("Supported flags:")
        puts("  --no-color         Disable colored output")
        puts("  --verbose, -v      Enable verbose output")
        puts("  --condensed, -c    Enable condensed output (default)")
        puts("  --tag=<name>       Run only tests with this tag")
        puts("  --skip-tag=<name>  Skip tests with this tag")
        sys.exit(1)
    else
        # It's a test path (file or directory) - use concat instead of push
        test_paths = test_paths.concat([arg])
    end
    i = i + 1
end

# If no paths specified, default to current directory
if test_paths.len() == 0
    test_paths = ["."]
end

# Configure test framework
if not use_colors
    test.set_colors(false)
end

if use_condensed
    test.set_condensed(true)
end

if filter_tags.len() > 0
    test.set_filter_tags(filter_tags)
end

if skip_tags.len() > 0
    test.set_skip_tags(skip_tags)
end

let tests = test.find_tests(test_paths)

# Only filter out directories if we're scanning from current directory
# If user specified specific paths, run all found tests
let filtered_tests = []
if test_paths.len() == 1 and test_paths[0] == "."
    # Filter out certain test files/directories when scanning everything:
    # - docs, examples, scripts: contain files that aren't proper tests
    filtered_tests = tests.filter(fun (t)
        # Check if path contains excluded directories
        let exclude_dirs = ["docs", "examples", "scripts"]
        let should_exclude = false

        for dir in exclude_dirs
            if t.slice(0, dir.len()) == dir or t.index_of("/" .. dir .. "/") >= 0
                should_exclude = true
            end
        end

        not should_exclude
    end)
else
    # User specified paths, don't filter
    filtered_tests = tests
end

filtered_tests.each(fun (t)
    # Loading the module automatically executes it, registering the tests
    sys.load_module(t)
end)

# Print overall summary
let status = test.stats()
sys.exit(status)