{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Quest",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#method-calls"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.quest",
          "match": "#.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "storage.type.function.quest",
          "match": "\\b(if|let|fun|end|elif|else|while|for|in|to|until|step|break|continue|return|match)\\b"
        },
        {
          "name": "entity.name.namespace.quest",
          "match": "\\b(use)\\b"
        },
        {
          "name": "keyword.other.quest",
          "match": "\\b(type|trait|impl|del|as|with|const|try|catch|ensure|raise)\\b"
        },
        {
          "name": "keyword.operator.logical.quest",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "variable.language.quest",
          "match": "\\bself\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.quest",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.quest",
              "match": "\\\\(n|t|r|\\\\|\")"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.quest",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.quest",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.quest",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.assignment.quest",
          "match": "(\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=|=)"
        },
        {
          "name": "keyword.operator.arithmetic.quest",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.bitwise.quest",
          "match": "(&|\\||\\^|<<|>>)"
        },
        {
          "name": "keyword.operator.string.quest",
          "match": "\\.\\."
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.quest",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.nil.quest",
          "match": "\\bnil\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.quest",
          "match": "\\b(puts|print)\\b(?=\\()"
        }
      ]
    },
    "method-calls": {
      "patterns": [
        {
          "name": "entity.name.function.method.quest",
          "match": "(?<=\\.)\\w+\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.dictionary.quest",
          "match": ":"
        },
        {
          "name": "punctuation.separator.comma.quest",
          "match": ","
        },
        {
          "name": "punctuation.separator.semicolon.quest",
          "match": ";"
        }
      ]
    }
  },
  "scopeName": "source.quest"
}
