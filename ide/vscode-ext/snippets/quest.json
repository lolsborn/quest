{
  "Function Declaration": {
    "prefix": "fun",
    "body": [
      "fun ${1:function_name}(${2:args})",
      "\t${3:// function body}",
      "end"
    ],
    "description": "Define a function"
  },
  "Type Declaration": {
    "prefix": "type",
    "body": [
      "type ${1:TypeName}",
      "\t${2:str}: ${3:field_name}",
      "",
      "\tfun ${4:method_name}(${5:args})",
      "\t\t${6:// method body}",
      "\tend",
      "end"
    ],
    "description": "Define a type with fields and methods"
  },
  "Type with Trait Implementation": {
    "prefix": "type-impl",
    "body": [
      "type ${1:TypeName}",
      "\t${2:str}: ${3:field_name}",
      "",
      "\timpl ${4:TraitName}",
      "\t\tfun ${5:method_name}(${6:args})",
      "\t\t\t${7:// method body}",
      "\t\tend",
      "\tend",
      "end"
    ],
    "description": "Define a type with trait implementation"
  },
  "Trait Declaration": {
    "prefix": "trait",
    "body": [
      "trait ${1:TraitName}",
      "\tfun ${2:method_name}(${3:args})",
      "end"
    ],
    "description": "Define a trait"
  },
  "If-Elif-Else Block": {
    "prefix": "ifelse",
    "body": [
      "if ${1:condition}",
      "\t${2:// if body}",
      "elif ${3:condition}",
      "\t${4:// elif body}",
      "else",
      "\t${5:// else body}",
      "end"
    ],
    "description": "If-elif-else control flow"
  },
  "If-Else Block": {
    "prefix": "ifel",
    "body": [
      "if ${1:condition}",
      "\t${2:// if body}",
      "else",
      "\t${3:// else body}",
      "end"
    ],
    "description": "If-else control flow"
  },
  "If Block": {
    "prefix": "if",
    "body": [
      "if ${1:condition}",
      "\t${2:// body}",
      "end"
    ],
    "description": "If control flow"
  },
  "While Loop": {
    "prefix": "while",
    "body": [
      "while ${1:condition}",
      "\t${2:// body}",
      "end"
    ],
    "description": "While loop"
  },
  "For-In Loop": {
    "prefix": "for",
    "body": [
      "for ${1:item} in ${2:collection}",
      "\t${3:// body}",
      "end"
    ],
    "description": "For-in loop"
  },
  "Try-Catch Block": {
    "prefix": "try",
    "body": [
      "try",
      "\t${1:// try body}",
      "catch ${2:e}",
      "\t${3:// handle error}",
      "end"
    ],
    "description": "Try-catch exception handling"
  },
  "Try-Catch-Ensure Block": {
    "prefix": "tryensure",
    "body": [
      "try",
      "\t${1:// try body}",
      "catch ${2:e}",
      "\t${3:// handle error}",
      "ensure",
      "\t${4:// cleanup}",
      "end"
    ],
    "description": "Try-catch-ensure exception handling"
  },
  "Test Module": {
    "prefix": "test",
    "body": [
      "use \"std/test\" as test",
      "",
      "test.module(\"${1:Module Name}\")",
      "",
      "test.describe(\"${2:Feature}\", fun ()",
      "\ttest.it(\"${3:does something}\", fun ()",
      "\t\t${4:// test body}",
      "\t\ttest.assert_eq(${5:actual}, ${6:expected}, nil)",
      "\tend)",
      "end)"
    ],
    "description": "Complete test module template"
  },
  "Test Describe Block": {
    "prefix": "describe",
    "body": [
      "test.describe(\"${1:Feature}\", fun ()",
      "\ttest.it(\"${2:does something}\", fun ()",
      "\t\t${3:// test body}",
      "\tend)",
      "end)"
    ],
    "description": "Test describe block with nested it"
  },
  "Test It Block": {
    "prefix": "it",
    "body": [
      "test.it(\"${1:does something}\", fun ()",
      "\t${2:// test body}",
      "end)"
    ],
    "description": "Test it block"
  },
  "Assert Equal": {
    "prefix": "assert_eq",
    "body": [
      "test.assert_eq(${1:actual}, ${2:expected}, nil)"
    ],
    "description": "Assert equality"
  },
  "Assert": {
    "prefix": "assert",
    "body": [
      "test.assert(${1:condition}, nil)"
    ],
    "description": "Assert condition is true"
  },
  "Use Statement": {
    "prefix": "use",
    "body": [
      "use \"${1:module/path}\" as ${2:alias}"
    ],
    "description": "Import a module"
  },
  "Let Statement": {
    "prefix": "let",
    "body": [
      "let ${1:variable} = ${2:value}"
    ],
    "description": "Declare a variable"
  },
  "Lambda Function": {
    "prefix": "lambda",
    "body": [
      "fun (${1:args}) ${2:expression} end"
    ],
    "description": "Lambda/anonymous function"
  },
  "Array Map": {
    "prefix": "map",
    "body": [
      "${1:array}.map(fun (${2:item})",
      "\t${3:// transform item}",
      "end)"
    ],
    "description": "Array map operation"
  },
  "Array Filter": {
    "prefix": "filter",
    "body": [
      "${1:array}.filter(fun (${2:item})",
      "\t${3:condition}",
      "end)"
    ],
    "description": "Array filter operation"
  },
  "Array Each": {
    "prefix": "each",
    "body": [
      "${1:array}.each(fun (${2:item})",
      "\t${3:// do something}",
      "end)"
    ],
    "description": "Array each iteration"
  },
  "Array Reduce": {
    "prefix": "reduce",
    "body": [
      "${1:array}.reduce(fun (${2:acc}, ${3:item})",
      "\t${4:// combine}",
      "end, ${5:initial})"
    ],
    "description": "Array reduce operation"
  },
  "Print Statement": {
    "prefix": "puts",
    "body": [
      "puts(${1:value})"
    ],
    "description": "Print with newline"
  },
  "Print Without Newline": {
    "prefix": "print",
    "body": [
      "print(${1:value})"
    ],
    "description": "Print without newline"
  }
}
