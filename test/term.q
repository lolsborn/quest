use "std/test" as test
use "std/term" as term

test.module("Terminal Styling")

test.describe("Basic colors", fun ()
    test.it("applies red color", fun ()
        let result = term.red("text")
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)

    test.it("applies green color", fun ()
        let result = term.green("text")
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)

    test.it("applies yellow color", fun ()
        let result = term.yellow("text")
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)

    test.it("applies blue color", fun ()
        let result = term.blue("text")
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)

    test.it("applies magenta color", fun ()
        let result = term.magenta("text")
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)

    test.it("applies cyan color", fun ()
        let result = term.cyan("text")
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)
end)

test.describe("Text attributes", fun ()
    test.it("applies bold", fun ()
        let result = term.bold("text")
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)

    test.it("applies underline", fun ()
        let result = term.underline("text")
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)

    test.it("applies dimmed", fun ()
        let result = term.dimmed("text")
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)
end)

test.describe("Colors with attributes", fun ()
    test.it("applies red with bold", fun ()
        let result = term.red("text", ["bold"])
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)

    test.it("applies green with multiple attributes", fun ()
        let result = term.green("text", ["bold", "underline"])
        test.assert_type(result, "Str", nil)
        test.assert_gt(result.len(), 4, nil)
    end)
end)

test.describe("ANSI control", fun ()
    test.it("returns reset code", fun ()
        let reset = term.reset()
        test.assert_type(reset, "Str", nil)
        test.assert_gt(reset.len(), 0, nil)
    end)
end)
