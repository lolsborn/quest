use "std/test"

test.module("Set")

test.describe("Set.new", fun ()
    test.it("creates set from array", fun ()
        let s = Set.new([1, 2, 3])
        test.assert_type(s, "Set")        test.assert_eq(s.len(), 3)
    end)

    test.it("removes duplicates", fun ()
        let s = Set.new([1, 2, 2, 3, 3, 3])
        test.assert_eq(s.len(), 3)
        test.assert_eq(s.contains(1), true)
        test.assert_eq(s.contains(2), true)
        test.assert_eq(s.contains(3), true)
    end)

    test.it("creates empty set", fun ()
        let s = Set.new([])
        test.assert_eq(s.len(), 0)
        test.assert_eq(s.empty(), true)
    end)

    test.it("works with strings", fun ()
        let s = Set.new(["a", "b", "c", "b"])
        test.assert_eq(s.len(), 3)
        test.assert_eq(s.contains("b"), true)
    end)

    test.it("works with booleans", fun ()
        let s = Set.new([true, false, true])
        test.assert_eq(s.len(), 2)
    end)

    test.it("works with floats", fun ()
        let s = Set.new([1.5, 2.5, 1.5])
        test.assert_eq(s.len(), 2)
        test.assert_eq(s.contains(1.5), true)
    end)

    test.it("works with mixed types", fun ()
        let s = Set.new([1, 2.5, "text", true])
        test.assert_eq(s.len(), 4)
    end)
end)

test.describe("set.contains", fun ()
    test.it("checks membership", fun ()
        let s = Set.new([1, 2, 3])
        test.assert_eq(s.contains(2), true)
        test.assert_eq(s.contains(5), false)
    end)

    test.it("works with strings", fun ()
        let s = Set.new(["apple", "banana", "cherry"])
        test.assert_eq(s.contains("banana"), true)
        test.assert_eq(s.contains("grape"), false)
    end)
end)

test.describe("set.len and set.empty", fun ()
    test.it("returns correct length", fun ()
        let s = Set.new([1, 2, 3])
        test.assert_eq(s.len(), 3)
    end)

    test.it("detects empty set", fun ()
        let s = Set.new([])
        test.assert_eq(s.empty(), true)
        test.assert_eq(s.len(), 0)
    end)

    test.it("detects non-empty set", fun ()
        let s = Set.new([1])
        test.assert_eq(s.empty(), false)
    end)
end)

test.describe("set.add", fun ()
    test.it("adds new element", fun ()
        let s = Set.new([1, 2])
        s.add(3)
        test.assert_eq(s.len(), 3)
        test.assert_eq(s.contains(3), true)
    end)

    test.it("ignores duplicate", fun ()
        let s = Set.new([1, 2, 3])
        s.add(2)
        test.assert_eq(s.len(), 3)
    end)

    test.it("adds multiple elements", fun ()
        let s = Set.new([])
        s.add(1)
        s.add(2)
        s.add(3)
        test.assert_eq(s.len(), 3)
    end)
end)

test.describe("set.remove", fun ()
    test.it("removes existing element", fun ()
        let s = Set.new([1, 2, 3])
        s.remove(2)
        test.assert_eq(s.len(), 2)
        test.assert_eq(s.contains(2), false)
    end)

    test.it("raises error for missing element", fun ()
        let s = Set.new([1, 2, 3])
        test.assert_raises(KeyErr, fun ()
            s.remove(5)
        end)
    end)
end)

test.describe("set.discard", fun ()
    test.it("removes existing element", fun ()
        let s = Set.new([1, 2, 3])
        s.discard(2)
        test.assert_eq(s.len(), 2)
        test.assert_eq(s.contains(2), false)
    end)

    test.it("does not raise error for missing element", fun ()
        let s = Set.new([1, 2, 3])
        s.discard(5)  # Should not error
        test.assert_eq(s.len(), 3)
    end)
end)

test.describe("set.clear", fun ()
    test.it("removes all elements", fun ()
        let s = Set.new([1, 2, 3])
        s.clear()
        test.assert_eq(s.len(), 0)
        test.assert_eq(s.empty(), true)
    end)
end)

test.describe("set.pop", fun ()
    test.it("removes and returns element", fun ()
        let s = Set.new([1, 2, 3])
        let elem = s.pop()
        test.assert_eq(s.len(), 2)
        test.assert_eq(s.contains(elem), false)
    end)

    test.it("raises error on empty set", fun ()
        let s = Set.new([])
        test.assert_raises(RuntimeErr, fun ()
            s.pop()
        end)
    end)
end)

test.describe("set.to_array", fun ()
    test.it("converts to sorted array", fun ()
        let s = Set.new([3, 1, 2])
        let arr = s.to_array()
        test.assert_eq(arr.len(), 3)
        test.assert_eq(arr[0], 1)        test.assert_eq(arr[1], 2)        test.assert_eq(arr[2], 3)    end)

    test.it("works with strings", fun ()
        let s = Set.new(["banana", "apple", "cherry"])
        let arr = s.to_array()
        test.assert_eq(arr[0], "apple")        test.assert_eq(arr[1], "banana")        test.assert_eq(arr[2], "cherry")    end)
end)

test.describe("set.union", fun ()
    test.it("combines two sets", fun ()
        let s1 = Set.new([1, 2, 3])
        let s2 = Set.new([3, 4, 5])
        let s3 = s1.union(s2)

        test.assert_eq(s3.len(), 5)
        test.assert_eq(s3.contains(1), true)
        test.assert_eq(s3.contains(2), true)
        test.assert_eq(s3.contains(3), true)
        test.assert_eq(s3.contains(4), true)
        test.assert_eq(s3.contains(5), true)
    end)

    test.it("does not modify originals", fun ()
        let s1 = Set.new([1, 2])
        let s2 = Set.new([3, 4])
        let s3 = s1.union(s2)

        test.assert_eq(s1.len(), 2)
        test.assert_eq(s2.len(), 2)
        test.assert_eq(s3.len(), 4)
    end)
end)

test.describe("set.intersection", fun ()
    test.it("finds common elements", fun ()
        let s1 = Set.new([1, 2, 3, 4])
        let s2 = Set.new([3, 4, 5, 6])
        let s3 = s1.intersection(s2)

        test.assert_eq(s3.len(), 2)
        test.assert_eq(s3.contains(3), true)
        test.assert_eq(s3.contains(4), true)
    end)

    test.it("returns empty set for disjoint sets", fun ()
        let s1 = Set.new([1, 2])
        let s2 = Set.new([3, 4])
        let s3 = s1.intersection(s2)

        test.assert_eq(s3.len(), 0)
        test.assert_eq(s3.empty(), true)
    end)
end)

test.describe("set.difference", fun ()
    test.it("finds elements in first but not second", fun ()
        let s1 = Set.new([1, 2, 3, 4])
        let s2 = Set.new([3, 4, 5, 6])
        let s3 = s1.difference(s2)

        test.assert_eq(s3.len(), 2)
        test.assert_eq(s3.contains(1), true)
        test.assert_eq(s3.contains(2), true)
        test.assert_eq(s3.contains(3), false)
    end)
end)

test.describe("set.symmetric_difference", fun ()
    test.it("finds elements in either but not both", fun ()
        let s1 = Set.new([1, 2, 3, 4])
        let s2 = Set.new([3, 4, 5, 6])
        let s3 = s1.symmetric_difference(s2)

        test.assert_eq(s3.len(), 4)
        test.assert_eq(s3.contains(1), true)
        test.assert_eq(s3.contains(2), true)
        test.assert_eq(s3.contains(5), true)
        test.assert_eq(s3.contains(6), true)
        test.assert_eq(s3.contains(3), false)
        test.assert_eq(s3.contains(4), false)
    end)
end)

test.describe("set.is_subset", fun ()
    test.it("checks subset relationship", fun ()
        let s1 = Set.new([1, 2])
        let s2 = Set.new([1, 2, 3, 4])
        test.assert_eq(s1.is_subset(s2), true)
        test.assert_eq(s2.is_subset(s1), false)
    end)

    test.it("set is subset of itself", fun ()
        let s = Set.new([1, 2, 3])
        test.assert_eq(s.is_subset(s), true)
    end)
end)

test.describe("set.is_superset", fun ()
    test.it("checks superset relationship", fun ()
        let s1 = Set.new([1, 2, 3, 4])
        let s2 = Set.new([1, 2])
        test.assert_eq(s1.is_superset(s2), true)
        test.assert_eq(s2.is_superset(s1), false)
    end)
end)

test.describe("set.is_disjoint", fun ()
    test.it("checks if sets have no common elements", fun ()
        let s1 = Set.new([1, 2, 3])
        let s2 = Set.new([4, 5, 6])
        test.assert_eq(s1.is_disjoint(s2), true)
    end)

    test.it("returns false for overlapping sets", fun ()
        let s1 = Set.new([1, 2, 3])
        let s2 = Set.new([3, 4, 5])
        test.assert_eq(s1.is_disjoint(s2), false)
    end)
end)

test.describe("real-world examples", fun ()
    test.it("deduplicates tags", fun ()
        let tags = ["rust", "python", "rust", "javascript", "python"]
        let unique = Set.new(tags)

        test.assert_eq(unique.len(), 3)
        test.assert_eq(unique.contains("rust"), true)
        test.assert_eq(unique.contains("python"), true)
        test.assert_eq(unique.contains("javascript"), true)
    end)

    test.it("finds common users in groups", fun ()
        let group_a = Set.new(["alice", "bob", "charlie"])
        let group_b = Set.new(["bob", "charlie", "david"])

        let both = group_a.intersection(group_b)
        test.assert_eq(both.len(), 2)
        test.assert_eq(both.contains("bob"), true)
        test.assert_eq(both.contains("charlie"), true)
    end)

    test.it("tracks visited nodes", fun ()
        let visited = Set.new([])
        let nodes = [1, 2, 3, 2, 1, 4]

        for node in nodes
            if not visited.contains(node)
                visited.add(node)
            end
        end

        test.assert_eq(visited.len(), 4)
        test.assert_eq(visited.contains(1), true)
        test.assert_eq(visited.contains(4), true)
    end)

    test.it("finds unique voters", fun ()
        let votes = ["alice", "bob", "alice", "charlie", "bob", "alice"]
        let voters = Set.new(votes)
        test.assert_eq(voters.len(), 3)
    end)
end)
