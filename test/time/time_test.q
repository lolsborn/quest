# Basic Time Module Tests
# Tests core time functionality

use "std/test" as test
use "std/time" as time

test.module("Time Module Tests - Basic")

test.describe("Module Import", fun ()
    test.it("can import time module", fun ()
        test.assert(time != nil, "time module should not be nil")
    end)
end)

test.describe("Current Time Functions", fun ()
    test.it("can get current timestamp with time.now()", fun ()
        let now = time.now()
        test.assert(now != nil, "now() should return a timestamp")
        test.assert_eq(now.cls(), "Timestamp", "Should be a Timestamp object")
    end)

    test.it("can get current local datetime with time.now_local()", fun ()
        let local = time.now_local()
        test.assert(local != nil, "now_local() should return a datetime")
        test.assert_eq(local.cls(), "Zoned", "Should be a Zoned object")
    end)

    test.it("can get today's date with time.today()", fun ()
        let today = time.today()
        test.assert(today != nil, "today() should return a date")
        test.assert_eq(today.cls(), "Date", "Should be a Date object")
    end)

    test.it("can get current time with time.time_now()", fun ()
        let t = time.time_now()
        test.assert(t != nil, "time_now() should return a time")
        test.assert_eq(t.cls(), "Time", "Should be a Time object")
    end)
end)

test.describe("Date Construction", fun ()
    test.it("can create a date from components", fun ()
        let date = time.date(2025, 10, 1)
        test.assert_eq(date.cls(), "Date", "Should be a Date object")
        test.assert_eq(date.year(), 2025, "Year should be 2025")
        test.assert_eq(date.month(), 10, "Month should be 10")
        test.assert_eq(date.day(), 1, "Day should be 1")
    end)

    test.it("can get day of week from date", fun ()
        let date = time.date(2025, 10, 1)
        test.assert_eq(date.day_of_week(), 3, "Oct 1, 2025 is a Wednesday (3)")
    end)
end)

test.describe("Time Construction", fun ()
    test.it("can create a time from components", fun ()
        let t = time.time(14, 30, 45)
        test.assert_eq(t.cls(), "Time", "Should be a Time object")
        test.assert_eq(t.hour(), 14, "Hour should be 14")
        test.assert_eq(t.minute(), 30, "Minute should be 30")
        test.assert_eq(t.second(), 45, "Second should be 45")
    end)

    test.it("can create a time with nanoseconds", fun ()
        let t = time.time(14, 30, 45, 123456789)
        test.assert_eq(t.nanosecond(), 123456789, "Nanosecond should be 123456789")
    end)
end)

test.describe("DateTime Construction", fun ()
    test.it("can create a datetime in UTC", fun ()
        let dt = time.datetime(2025, 10, 1, 14, 30, 0)
        test.assert_eq(dt.cls(), "Zoned", "Should be a Zoned object")
        test.assert_eq(dt.year(), 2025, "Year should be 2025")
        test.assert_eq(dt.month(), 10, "Month should be 10")
        test.assert_eq(dt.day(), 1, "Day should be 1")
        test.assert_eq(dt.hour(), 14, "Hour should be 14")
        test.assert_eq(dt.minute(), 30, "Minute should be 30")
    end)

    test.it("can create a datetime with timezone", fun ()
        let dt = time.datetime(2025, 10, 1, 14, 30, 0, "America/New_York")
        test.assert_eq(dt.timezone(), "America/New_York", "Timezone should be America/New_York")
    end)
end)

test.describe("Span Construction", fun ()
    test.it("can create a span of days", fun ()
        let span = time.days(5)
        test.assert_eq(span.cls(), "Span", "Should be a Span object")
        test.assert_eq(span.days(), 5, "Should have 5 days")
    end)

    test.it("can create a span of hours", fun ()
        let span = time.hours(3)
        test.assert_eq(span.hours(), 3, "Should have 3 hours")
    end)

    test.it("can create a span of minutes", fun ()
        let span = time.minutes(30)
        test.assert_eq(span.minutes(), 30, "Should have 30 minutes")
    end)

    test.it("can create a span of seconds", fun ()
        let span = time.seconds(90)
        test.assert_eq(span.seconds(), 90, "Should have 90 seconds")
    end)
end)

test.describe("DateTime Arithmetic", fun ()
    test.it("can add days to datetime", fun ()
        let dt = time.datetime(2025, 10, 1, 14, 30, 0)
        let tomorrow = dt.add_days(1)
        test.assert_eq(tomorrow.day(), 2, "Should be Oct 2")
    end)

    test.it("can add hours to datetime", fun ()
        let dt = time.datetime(2025, 10, 1, 14, 30, 0)
        let later = dt.add_hours(5)
        test.assert_eq(later.hour(), 19, "Should be 19:30")
    end)

    test.it("can subtract days from datetime", fun ()
        let dt = time.datetime(2025, 10, 1, 14, 30, 0)
        let yesterday = dt.subtract_days(1)
        test.assert_eq(yesterday.month(), 9, "Should be Sept")
        test.assert_eq(yesterday.day(), 30, "Should be Sept 30")
    end)
end)

test.describe("Date Arithmetic", fun ()
    test.it("can add days to date", fun ()
        let date = time.date(2025, 10, 1)
        let tomorrow = date.add_days(1)
        test.assert_eq(tomorrow.day(), 2, "Should be day 2")
    end)

    test.it("can add months to date", fun ()
        let date = time.date(2025, 10, 1)
        let next_month = date.add_months(1)
        test.assert_eq(next_month.month(), 11, "Should be November")
    end)

    test.it("can add years to date", fun ()
        let date = time.date(2025, 10, 1)
        let next_year = date.add_years(1)
        test.assert_eq(next_year.year(), 2026, "Should be 2026")
    end)
end)

test.describe("DateTime Comparison", fun ()
    test.it("can check if two datetimes are equal", fun ()
        let dt1 = time.datetime(2025, 10, 1, 14, 30, 0)
        let dt2 = time.datetime(2025, 10, 1, 14, 30, 0)
        test.assert(dt1.equals(dt2), "Datetimes should be equal")
    end)

    test.it("can check if datetime is before another", fun ()
        let dt1 = time.datetime(2025, 10, 1, 14, 30, 0)
        let dt2 = time.datetime(2025, 10, 2, 14, 30, 0)
        test.assert(dt1.before(dt2), "dt1 should be before dt2")
    end)

    test.it("can check if datetime is after another", fun ()
        let dt1 = time.datetime(2025, 10, 2, 14, 30, 0)
        let dt2 = time.datetime(2025, 10, 1, 14, 30, 0)
        test.assert(dt1.after(dt2), "dt1 should be after dt2")
    end)
end)

test.describe("Utility Functions", fun ()
    test.it("can check if year is leap year", fun ()
        test.assert(time.is_leap_year(2024), "2024 should be a leap year")
        test.assert(not time.is_leap_year(2025), "2025 should not be a leap year")
        test.assert(time.is_leap_year(2000), "2000 should be a leap year")
        test.assert(not time.is_leap_year(1900), "1900 should not be a leap year")
    end)
end)

test.describe("Timestamp Methods", fun ()
    test.it("can convert timestamp to seconds", fun ()
        let now = time.now()
        let seconds = now.as_seconds()
        test.assert(seconds > 0, "Seconds should be positive")
    end)

    test.it("can convert timestamp to milliseconds", fun ()
        let now = time.now()
        let millis = now.as_millis()
        test.assert(millis > 0, "Milliseconds should be positive")
    end)
end)
