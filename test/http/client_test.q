use "std/test" as test
use "std/http/client" as http

test.module("HTTP Client")

# Tag all HTTP tests as slow since they make network requests
test.with_tags(["slow"])
test.describe("Basic GET requests", fun ()
    test.it("performs simple GET request", fun ()
        let resp = http.get("https://httpbin.org/get")
        test.assert(resp.ok(), "Response should be OK")
        test.assert_eq(resp.status(), 200, nil)
    end)

    test.it("returns valid response object", fun ()
        let resp = http.get("https://httpbin.org/get")
        test.assert_type(resp, "HttpResponse", "Should return HttpResponse")
    end)

    test.it("tracks final URL", fun ()
        let resp = http.get("https://httpbin.org/get")
        let url = resp.url()
        test.assert(url.contains("httpbin.org"), "URL should contain httpbin.org")
    end)
end)

test.with_tags(["slow"])
test.describe("Response body parsing", fun ()
    test.it("parses JSON response", fun ()
        let resp = http.get("https://httpbin.org/json")
        let json = resp.json()
        test.assert_type(json, "Dict", "Should return Dict for JSON")
    end)

    test.it("returns text response", fun ()
        let resp = http.get("https://httpbin.org/robots.txt")
        let text = resp.text()
        test.assert_type(text, "Str", "Should return Str for text")
        test.assert(text.len() > 0, "Text should not be empty")
    end)

    test.it("returns bytes response", fun ()
        let resp = http.get("https://httpbin.org/bytes/50")
        let bytes = resp.bytes()
        test.assert_type(bytes, "Bytes", "Should return Bytes")
        test.assert_eq(bytes.len(), 50, "Should return exactly 50 bytes")
    end)

    test.it("caches body after first access", fun ()
        let resp = http.get("https://httpbin.org/get")
        let text1 = resp.text()
        let text2 = resp.text()
        test.assert_eq(text1, text2, "Should return same cached text")
    end)
end)

test.with_tags(["slow"])
test.describe("Response headers", fun ()
    test.it("accesses headers case-insensitively", fun ()
        let resp = http.get("https://httpbin.org/get")
        let ct1 = resp.header("content-type")
        let ct2 = resp.header("Content-Type")
        let ct3 = resp.header("CONTENT-TYPE")
        test.assert_eq(ct1, ct2, "Should be case-insensitive")
        test.assert_eq(ct2, ct3, "Should be case-insensitive")
    end)

    test.it("returns nil for missing headers", fun ()
        let resp = http.get("https://httpbin.org/get")
        let missing = resp.header("X-Non-Existent-Header")
        test.assert_nil(missing, "Missing header should return nil")
    end)

    test.it("checks header existence", fun ()
        let resp = http.get("https://httpbin.org/get")
        test.assert(resp.has_header("content-type"), "Should have content-type")
        test.assert(not resp.has_header("x-missing"), "Should not have x-missing")
    end)

    test.it("returns all headers as dict", fun ()
        let resp = http.get("https://httpbin.org/get")
        let headers = resp.headers()
        test.assert_type(headers, "Dict", "Should return Dict")
        test.assert(headers.keys().len() > 0, "Should have headers")
    end)

    test.it("provides content-type helper", fun ()
        let resp = http.get("https://httpbin.org/json")
        let ct = resp.content_type()
        test.assert(ct.contains("application/json"), "Should be JSON content type")
    end)
end)

test.with_tags(["slow"])
test.describe("Status code helpers", fun ()
    test.it("identifies successful responses", fun ()
        let resp = http.get("https://httpbin.org/status/200")
        test.assert(resp.ok(), "200 should be ok")
        test.assert(resp.is_success(), "200 should be success")
    end)

    test.it("identifies client errors", fun ()
        let resp = http.get("https://httpbin.org/status/404")
        test.assert(not resp.ok(), "404 should not be ok")
        test.assert(resp.is_client_error(), "404 should be client error")
        test.assert_eq(resp.status(), 404, nil)
    end)

    test.it("identifies server errors", fun ()
        let resp = http.get("https://httpbin.org/status/500")
        test.assert(resp.is_server_error(), "500 should be server error")
        test.assert_eq(resp.status(), 500, nil)
    end)

    test.it("follows redirects automatically", fun ()
        # Note: reqwest follows redirects by default
        # So /status/302 will actually return 200 after following the redirect
        let resp = http.get("https://httpbin.org/status/302")
        # After following redirect, we get a success response
        test.assert(resp.ok(), "Should successfully follow redirect")
    end)
end)

test.with_tags(["slow"])
test.describe("Content type detection", fun ()
    test.it("detects JSON content", fun ()
        let resp = http.get("https://httpbin.org/json")
        test.assert(resp.is_json(), "Should detect JSON content")
    end)

    test.it("detects HTML content", fun ()
        let resp = http.get("https://httpbin.org/html")
        test.assert(resp.is_html(), "Should detect HTML content")
    end)

    test.it("detects text content", fun ()
        let resp = http.get("https://httpbin.org/robots.txt")
        test.assert(resp.is_text(), "Should detect text content")
    end)
end)

test.with_tags(["slow"])
test.describe("HTTP methods", fun ()
    test.it("performs DELETE request", fun ()
        let resp = http.delete("https://httpbin.org/delete")
        test.assert_eq(resp.status(), 200, nil)
    end)

    test.it("performs HEAD request", fun ()
        let resp = http.head("https://httpbin.org/get")
        test.assert(resp.ok(), "HEAD should succeed")
        test.assert(resp.has_header("content-type"), "HEAD should return headers")
    end)

    test.it("performs OPTIONS request", fun ()
        let resp = http.options("https://httpbin.org/get")
        test.assert(resp.ok(), "OPTIONS should succeed")
    end)
end)

test.with_tags(["slow"])
test.describe("Client creation and reuse", fun ()
    test.it("creates new client", fun ()
        let client = http.client()
        test.assert_type(client, "HttpClient", "Should return HttpClient")
    end)

    test.it("reuses client for multiple requests", fun ()
        let client = http.client()
        let resp1 = client.get("https://httpbin.org/uuid")
        let resp2 = client.get("https://httpbin.org/uuid")

        test.assert(resp1.ok(), "First request should succeed")
        test.assert(resp2.ok(), "Second request should succeed")

        let uuid1 = resp1.json()
        let uuid2 = resp2.json()
        test.assert(uuid1["uuid"] != uuid2["uuid"], "Should get different UUIDs")
    end)

    test.it("client has timeout method", fun ()
        let client = http.client()
        let timeout = client.timeout()
        test.assert_type(timeout, "Num", "Timeout should be a number")
        test.assert(timeout > 0, "Timeout should be positive")
    end)
end)

test.with_tags(["slow"])
test.describe("Response object properties", fun ()
    test.it("has valid object ID", fun ()
        let resp = http.get("https://httpbin.org/get")
        let id = resp._id()
        test.assert_type(id, "Num", "ID should be a number")
        test.assert(id > 0, "ID should be positive")
    end)

    test.it("has string representation", fun ()
        let resp = http.get("https://httpbin.org/get")
        let str_repr = resp._str()
        test.assert_type(str_repr, "Str", "Should return string")
        test.assert(str_repr.contains("HttpResponse"), "Should mention HttpResponse")
    end)
end)

test.with_tags(["slow"])
test.describe("Edge cases", fun ()
    test.it("handles empty response body", fun ()
        let resp = http.get("https://httpbin.org/status/204")
        test.assert_eq(resp.status(), 204, "Should return 204 No Content")
    end)

    test.it("handles large response bodies", fun ()
        let resp = http.get("https://httpbin.org/bytes/10000")
        let bytes = resp.bytes()
        test.assert_eq(bytes.len(), 10000, "Should handle large responses")
    end)
end)

test.with_tags(["slow"])
test.describe("Module-level convenience functions", fun ()
    test.it("http.get() creates temporary client", fun ()
        let resp = http.get("https://httpbin.org/get")
        test.assert(resp.ok(), "Convenience function should work")
    end)

    test.it("http.delete() creates temporary client", fun ()
        let resp = http.delete("https://httpbin.org/delete")
        test.assert(resp.ok(), "Convenience delete should work")
    end)

    test.it("http.head() creates temporary client", fun ()
        let resp = http.head("https://httpbin.org/get")
        test.assert(resp.ok(), "Convenience head should work")
    end)
end)
